{"ast":null,"code":"var _jsxFileName = \"/Users/JOAKO/Desktop/Flatiron/000_DraftWork/react-testing/src/components/Board.js\";\nimport React from \"react\";\nimport \"./Components.css\";\nimport Cell from \"./Cell\";\n\nclass Board extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      cells: [],\n      score: 0,\n      isAlive: true\n    };\n\n    this.updateScore = () => {\n      this.setState({\n        score: ++this.state.score\n      });\n    };\n\n    this.endGame = () => {\n      this.setState({\n        isAlive: false\n      });\n      console.log(\"you lost\");\n    };\n\n    this.calculateSurroundings = (row, col) => {\n      this.state.cells.reduce((acc, curr) => {\n        return acc + (row == curr.cell && col == curr.col && curr.isBomb ? 1 : 0);\n      }, 0);\n    };\n  }\n\n  componentDidMount() {\n    let newCells = [];\n\n    for (let i = 0; i < 10; i++) {\n      for (let j = 0; j < 10; j++) {\n        let cell = {\n          row: i,\n          col: j,\n          isBomb: Math.floor(Math.random() * 10) < 1\n        };\n        newCells.push(cell);\n      }\n    }\n\n    this.setState({\n      cells: newCells\n    });\n  }\n\n  render() {\n    return React.createElement(React.Fragment, null, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    }, \"Score: \".concat(this.state.score)), React.createElement(\"div\", {\n      className: \"board\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    }, this.state.cells.map(cell => React.createElement(Cell, Object.assign({}, cell, {\n      updateScore: this.updateScore,\n      endGame: this.endGame,\n      calculateSurroundings: this.calculateSurroundings,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    })))));\n  }\n\n}\n\nexport default Board;","map":{"version":3,"sources":["/Users/JOAKO/Desktop/Flatiron/000_DraftWork/react-testing/src/components/Board.js"],"names":["React","Cell","Board","Component","state","cells","score","isAlive","updateScore","setState","endGame","console","log","calculateSurroundings","row","col","reduce","acc","curr","cell","isBomb","componentDidMount","newCells","i","j","Math","floor","random","push","render","map"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,kBAAP;AACA,OAAOC,IAAP,MAAiB,QAAjB;;AAEA,MAAMC,KAAN,SAAoBF,KAAK,CAACG,SAA1B,CAAoC;AAAA;AAAA;AAAA,SACnCC,KADmC,GAC3B;AACPC,MAAAA,KAAK,EAAE,EADA;AAEPC,MAAAA,KAAK,EAAE,CAFA;AAGPC,MAAAA,OAAO,EAAE;AAHF,KAD2B;;AAAA,SAwBnCC,WAxBmC,GAwBrB,MAAM;AACnB,WAAKC,QAAL,CAAc;AAAEH,QAAAA,KAAK,EAAE,EAAE,KAAKF,KAAL,CAAWE;AAAtB,OAAd;AACA,KA1BkC;;AAAA,SA4BnCI,OA5BmC,GA4BzB,MAAM;AACf,WAAKD,QAAL,CAAc;AAAEF,QAAAA,OAAO,EAAE;AAAX,OAAd;AACAI,MAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ;AACA,KA/BkC;;AAAA,SAiCnCC,qBAjCmC,GAiCX,CAACC,GAAD,EAAMC,GAAN,KAAc;AACrC,WAAKX,KAAL,CAAWC,KAAX,CAAiBW,MAAjB,CAAwB,CAACC,GAAD,EAAMC,IAAN,KAAe;AACtC,eAAOD,GAAG,IAAIH,GAAG,IAAII,IAAI,CAACC,IAAZ,IAAoBJ,GAAG,IAAIG,IAAI,CAACH,GAAhC,IAAuCG,IAAI,CAACE,MAA5C,GAAqD,CAArD,GAAyD,CAA7D,CAAV;AACA,OAFD,EAEG,CAFH;AAGA,KArCkC;AAAA;;AAOnCC,EAAAA,iBAAiB,GAAG;AACnB,QAAIC,QAAQ,GAAG,EAAf;;AAEA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,EAApB,EAAwBA,CAAC,EAAzB,EAA6B;AAC5B,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,EAApB,EAAwBA,CAAC,EAAzB,EAA6B;AAC5B,YAAIL,IAAI,GAAG;AACVL,UAAAA,GAAG,EAAES,CADK;AAEVR,UAAAA,GAAG,EAAES,CAFK;AAGVJ,UAAAA,MAAM,EAAEK,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,EAA3B,IAAiC;AAH/B,SAAX;AAKAL,QAAAA,QAAQ,CAACM,IAAT,CAAcT,IAAd;AACA;AACD;;AAED,SAAKV,QAAL,CAAc;AAAEJ,MAAAA,KAAK,EAAEiB;AAAT,KAAd;AACA;;AAiBDO,EAAAA,MAAM,GAAG;AACR,WACC,0CACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAAe,KAAKzB,KAAL,CAAWE,KAA1B,EADD,EAEC;AAAK,MAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,KAAKF,KAAL,CAAWC,KAAX,CAAiByB,GAAjB,CAAqBX,IAAI,IACzB,oBAAC,IAAD,oBACKA,IADL;AAEC,MAAA,WAAW,EAAE,KAAKX,WAFnB;AAGC,MAAA,OAAO,EAAE,KAAKE,OAHf;AAIC,MAAA,qBAAqB,EAAE,KAAKG,qBAJ7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OADA,CADF,CAFD,CADD;AAeA;;AAvDkC;;AA0DpC,eAAeX,KAAf","sourcesContent":["import React from \"react\";\nimport \"./Components.css\";\nimport Cell from \"./Cell\";\n\nclass Board extends React.Component {\n\tstate = {\n\t\tcells: [],\n\t\tscore: 0,\n\t\tisAlive: true,\n\t};\n\n\tcomponentDidMount() {\n\t\tlet newCells = [];\n\n\t\tfor (let i = 0; i < 10; i++) {\n\t\t\tfor (let j = 0; j < 10; j++) {\n\t\t\t\tlet cell = {\n\t\t\t\t\trow: i,\n\t\t\t\t\tcol: j,\n\t\t\t\t\tisBomb: Math.floor(Math.random() * 10) < 1,\n\t\t\t\t};\n\t\t\t\tnewCells.push(cell);\n\t\t\t}\n\t\t}\n\n\t\tthis.setState({ cells: newCells });\n\t}\n\n\tupdateScore = () => {\n\t\tthis.setState({ score: ++this.state.score });\n\t};\n\n\tendGame = () => {\n\t\tthis.setState({ isAlive: false });\n\t\tconsole.log(\"you lost\");\n\t};\n\n\tcalculateSurroundings = (row, col) => {\n\t\tthis.state.cells.reduce((acc, curr) => {\n\t\t\treturn acc + (row == curr.cell && col == curr.col && curr.isBomb ? 1 : 0);\n\t\t}, 0);\n\t};\n\n\trender() {\n\t\treturn (\n\t\t\t<>\n\t\t\t\t<h3>{`Score: ${this.state.score}`}</h3>\n\t\t\t\t<div className=\"board\">\n\t\t\t\t\t{this.state.cells.map(cell => (\n\t\t\t\t\t\t<Cell\n\t\t\t\t\t\t\t{...cell}\n\t\t\t\t\t\t\tupdateScore={this.updateScore}\n\t\t\t\t\t\t\tendGame={this.endGame}\n\t\t\t\t\t\t\tcalculateSurroundings={this.calculateSurroundings}\n\t\t\t\t\t\t/>\n\t\t\t\t\t))}\n\t\t\t\t</div>\n\t\t\t</>\n\t\t);\n\t}\n}\n\nexport default Board;\n"]},"metadata":{},"sourceType":"module"}